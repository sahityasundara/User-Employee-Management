{"ast":null,"code":"import axios from 'axios';\n\n// Create an instance of axios\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  // Your backend API base URL\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the token in headers\napi.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  if (user && user.token) {\n    config.headers['Authorization'] = 'Bearer ' + user.token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// --- AUTH SERVICE ---\nexport const login = (username, password) => {\n  return api.post('/auth/login', {\n    username,\n    password\n  });\n};\nexport const resetPassword = newPassword => {\n  return api.post('/auth/reset-password', {\n    newPassword\n  });\n};\n\n// --- ADMIN SERVICE ---\nexport const createUser = (username, password, role) => {\n  return api.post('/admin/users', {\n    username,\n    password,\n    role\n  });\n};\n\n// --- HR/MANAGER SERVICE ---\nexport const onboardEmployee = employeeData => {\n  return api.post('/hr-manager/onboard-employee', employeeData);\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","error","Promise","reject","login","username","password","post","resetPassword","newPassword","createUser","role","onboardEmployee","employeeData"],"sources":["C:/Users/SUNDARA RAMARAO/user-employee-management-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an instance of axios\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:8080/api', // Your backend API base URL\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Add a request interceptor to include the token in headers\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (user && user.token) {\r\n            config.headers['Authorization'] = 'Bearer ' + user.token;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// --- AUTH SERVICE ---\r\nexport const login = (username, password) => {\r\n    return api.post('/auth/login', { username, password });\r\n};\r\n\r\nexport const resetPassword = (newPassword) => {\r\n    return api.post('/auth/reset-password', { newPassword });\r\n};\r\n\r\n// --- ADMIN SERVICE ---\r\nexport const createUser = (username, password, role) => {\r\n    return api.post('/admin/users', { username, password, role });\r\n};\r\n\r\n// --- HR/MANAGER SERVICE ---\r\nexport const onboardEmployee = (employeeData) => {\r\n    return api.post('/hr-manager/onboard-employee', employeeData);\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,IAAK;EACR,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EACrD,IAAIJ,IAAI,IAAIA,IAAI,CAACK,KAAK,EAAE;IACpBN,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGK,IAAI,CAACK,KAAK;EAC5D;EACA,OAAON,MAAM;AACjB,CAAC,EACAO,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,OAAO,MAAMG,KAAK,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EACzC,OAAOnB,GAAG,CAACoB,IAAI,CAAC,aAAa,EAAE;IAAEF,QAAQ;IAAEC;EAAS,CAAC,CAAC;AAC1D,CAAC;AAED,OAAO,MAAME,aAAa,GAAIC,WAAW,IAAK;EAC1C,OAAOtB,GAAG,CAACoB,IAAI,CAAC,sBAAsB,EAAE;IAAEE;EAAY,CAAC,CAAC;AAC5D,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAGA,CAACL,QAAQ,EAAEC,QAAQ,EAAEK,IAAI,KAAK;EACpD,OAAOxB,GAAG,CAACoB,IAAI,CAAC,cAAc,EAAE;IAAEF,QAAQ;IAAEC,QAAQ;IAAEK;EAAK,CAAC,CAAC;AACjE,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAIC,YAAY,IAAK;EAC7C,OAAO1B,GAAG,CAACoB,IAAI,CAAC,8BAA8B,EAAEM,YAAY,CAAC;AACjE,CAAC;AAED,eAAe1B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}