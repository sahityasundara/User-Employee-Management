{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUNDARA RAMARAO\\\\user-employee-management-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Navigate, Route, Routes, useNavigate } from 'react-router-dom';\nimport LoginPage from './pages/LoginPage';\nimport AdminDashboard from './pages/AdminDashboard';\nimport OnboardingPage from './pages/OnboardingPage';\nimport ResetPasswordPage from './pages/ResetPasswordPage';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate();\n\n  // On initial load, check for user data in localStorage\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n  const handleLoginSuccess = userData => {\n    localStorage.setItem('user', JSON.stringify(userData));\n    setUser(userData);\n    // Navigate based on role after login\n    if (userData.firstTimeLogin) {\n      navigate('/reset-password');\n    } else {\n      const isAdmin = userData.roles.includes('ROLE_ADMIN');\n      navigate(isAdmin ? '/admin' : '/dashboard');\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n    navigate('/login');\n  };\n\n  // This is called after a successful password reset\n  const handlePasswordResetSuccess = () => {\n    handleLogout();\n  };\n\n  // --- R O U T I N G ---\n  // A component to protect routes that require authentication\n  const ProtectedRoute = ({\n    children\n  }) => {\n    if (!user) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 20\n      }, this);\n    }\n    // If logged in, but must reset password, force redirect\n    if (user.firstTimeLogin) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/reset-password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 20\n      }, this);\n    }\n    return children;\n  };\n\n  // A component to specifically handle the reset password page\n  const ResetPasswordRoute = ({\n    children\n  }) => {\n    if (!user) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 20\n      }, this);\n    }\n    if (!user.firstTimeLogin) {\n      // If user doesn't need to reset, send them to their dashboard\n      const isAdmin = user.roles.includes('ROLE_ADMIN');\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: isAdmin ? '/admin' : '/dashboard'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this);\n    }\n    return children;\n  };\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/login\",\n      element: /*#__PURE__*/_jsxDEV(LoginPage, {\n        onLoginSuccess: handleLoginSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 43\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/reset-password\",\n      element: /*#__PURE__*/_jsxDEV(ResetPasswordRoute, {\n        children: /*#__PURE__*/_jsxDEV(ResetPasswordPage, {\n          onPasswordResetSuccess: handlePasswordResetSuccess\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/admin\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        children: /*#__PURE__*/_jsxDEV(AdminDashboard, {\n          user: user,\n          onLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/dashboard\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        children: /*#__PURE__*/_jsxDEV(OnboardingPage, {\n          user: user,\n          onLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"*\",\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: user ? user.firstTimeLogin ? '/reset-password' : user.roles.includes('ROLE_ADMIN') ? '/admin' : '/dashboard' : '/login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"/48TlfV0adSMEvsbW2gk5sMeopI=\", false, function () {\n  return [useNavigate];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","Route","Routes","useNavigate","LoginPage","AdminDashboard","OnboardingPage","ResetPasswordPage","jsxDEV","_jsxDEV","App","_s","user","setUser","navigate","storedUser","localStorage","getItem","JSON","parse","handleLoginSuccess","userData","setItem","stringify","firstTimeLogin","isAdmin","roles","includes","handleLogout","removeItem","handlePasswordResetSuccess","ProtectedRoute","children","to","fileName","_jsxFileName","lineNumber","columnNumber","ResetPasswordRoute","path","element","onLoginSuccess","onPasswordResetSuccess","onLogout","_c","$RefreshReg$"],"sources":["C:/Users/SUNDARA RAMARAO/user-employee-management-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Navigate, Route, Routes, useNavigate } from 'react-router-dom';\nimport LoginPage from './pages/LoginPage';\nimport AdminDashboard from './pages/AdminDashboard';\nimport OnboardingPage from './pages/OnboardingPage';\nimport ResetPasswordPage from './pages/ResetPasswordPage';\nimport './App.css';\n\nfunction App() {\n    const [user, setUser] = useState(null);\n    const navigate = useNavigate();\n\n    // On initial load, check for user data in localStorage\n    useEffect(() => {\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n            setUser(JSON.parse(storedUser));\n        }\n    }, []);\n\n    const handleLoginSuccess = (userData) => {\n        localStorage.setItem('user', JSON.stringify(userData));\n        setUser(userData);\n        // Navigate based on role after login\n        if (userData.firstTimeLogin) {\n            navigate('/reset-password');\n        } else {\n            const isAdmin = userData.roles.includes('ROLE_ADMIN');\n            navigate(isAdmin ? '/admin' : '/dashboard');\n        }\n    };\n\n    const handleLogout = () => {\n        localStorage.removeItem('user');\n        setUser(null);\n        navigate('/login');\n    };\n\n    // This is called after a successful password reset\n    const handlePasswordResetSuccess = () => {\n        handleLogout();\n    };\n\n    // --- R O U T I N G ---\n    // A component to protect routes that require authentication\n    const ProtectedRoute = ({ children }) => {\n        if (!user) {\n            return <Navigate to=\"/login\" />;\n        }\n        // If logged in, but must reset password, force redirect\n        if (user.firstTimeLogin) {\n            return <Navigate to=\"/reset-password\" />;\n        }\n        return children;\n    };\n    \n    // A component to specifically handle the reset password page\n    const ResetPasswordRoute = ({ children }) => {\n        if (!user) {\n            return <Navigate to=\"/login\" />;\n        }\n        if (!user.firstTimeLogin) {\n            // If user doesn't need to reset, send them to their dashboard\n             const isAdmin = user.roles.includes('ROLE_ADMIN');\n             return <Navigate to={isAdmin ? '/admin' : '/dashboard'} />;\n        }\n        return children;\n    };\n\n\n    return (\n        <Routes>\n            {/* Public Login Route */}\n            <Route path=\"/login\" element={<LoginPage onLoginSuccess={handleLoginSuccess} />} />\n\n            {/* Password Reset Route */}\n            <Route\n                path=\"/reset-password\"\n                element={\n                    <ResetPasswordRoute>\n                        <ResetPasswordPage onPasswordResetSuccess={handlePasswordResetSuccess} />\n                    </ResetPasswordRoute>\n                }\n            />\n\n            {/* Protected Admin Route */}\n            <Route\n                path=\"/admin\"\n                element={\n                    <ProtectedRoute>\n                        <AdminDashboard user={user} onLogout={handleLogout} />\n                    </ProtectedRoute>\n                }\n            />\n\n            {/* Protected HR/Manager Route */}\n            <Route\n                path=\"/dashboard\"\n                element={\n                    <ProtectedRoute>\n                        <OnboardingPage user={user} onLogout={handleLogout} />\n                    </ProtectedRoute>\n                }\n            />\n            \n            {/* Default route */}\n            <Route path=\"*\" element={<Navigate to={user ? (user.firstTimeLogin ? '/reset-password' : (user.roles.includes('ROLE_ADMIN') ? '/admin' : '/dashboard')) : '/login'} />} />\n\n        </Routes>\n    );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}